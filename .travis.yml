os: linux
dist: xenial

language: php

## Cache composer and apt downloads.
cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files
    - /home/travis/.rvm/

php:
  - 5.6
  - 7.0
  - 7.1
  - 7.2

env:
  - PHPCS_VERSION="dev-master" LINT=1
  - PHPCS_VERSION="3.1.0"
  - PHPCS_VERSION="2.9.2"
  - PHPCS_VERSION="2.6.0"

# Define the stages used.
# For non-PRs, only the sniff and quicktest stages are run.
# For pull requests and merges, the full script is run (skipping quicktest).
# Note: for pull requests, "develop" is the base branch name.
# See: https://docs.travis-ci.com/user/conditions-v1
stages:
  - name: sniff
  - name: docs
    if: branch IN (master)
  - name: quicktest
    if: type = push AND branch NOT IN (master, develop)
  - name: test
    if: branch IN (master, develop)
  - name: coverage
    if: branch IN (master, develop)

jobs:
  fast_finish: true
  include:
    #### SNIFF STAGE ####
    - stage: sniff
      php: 7.4
      addons:
        apt:
          packages:
            - libxml2-utils
      install:
        - export XMLLINT_INDENT="    "
        # Set up CS check.
        # - Using PHPCS `master` as an early detection system for bugs upstream.
        # - COMPOSER_ROOT_VERSION is needed to get round the recursive dependency when using CI.
        - export COMPOSER_ROOT_VERSION="1.99.99"
        - travis_retry composer remove --dev phpunit/phpunit --no-update --no-scripts
        - travis_retry composer require --no-update squizlabs/php_codesniffer:"dev-master"
        - travis_retry composer install-devcs
      script:
        # Validate the composer.json file.
        # @link https://getcomposer.org/doc/03-cli.md#validate
        - composer validate --no-check-all --strict

        # Check the code style of the code base.
        - vendor/bin/phpcs

        # Validate the xml files.
        # @link http://xmlsoft.org/xmllint.html
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./PHPCSUtils/ruleset.xml
        - xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./PHPCS23Utils/ruleset.xml

        # Check the code-style consistency of the xml files.
        - diff -B ./PHPCSUtils/ruleset.xml <(xmllint --format "./PHPCSUtils/ruleset.xml")
        - diff -B ./PHPCS23Utils/ruleset.xml <(xmllint --format "./PHPCS23Utils/ruleset.xml")
      after_success: skip

    #### DOCUMENTATION SITE TESTING STAGE ####
    - stage: docs
      language: ruby
      cache: bundler
      rvm: 2.5.8
      before_install: skip
      install:
        - cd ./docs
        - gem install bundler
        - bundle install
      before_script: skip
      script:
        # Test the documentation generation.
        - bundle exec jekyll build
      after_success: skip

    #### QUICK TEST STAGE ####
    # This is a much quicker test which only runs the unit tests and linting against the low/high
    # supported PHP/PHPCS combinations.
    # These are basically the same builds as in the Coverage stage, but then without doing
    # the code-coverage.
    - stage: quicktest
      php: 7.4
      env: PHPCS_VERSION="dev-master" LINT=1
    - stage: quicktest
      php: 7.3
      # PHPCS is only compatible with PHP 7.3 as of version 3.3.1/2.9.2.
      env: PHPCS_VERSION="2.9.2"

    - stage: quicktest
      php: 5.4
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1
    - stage: quicktest
      php: 5.4
      dist: trusty
      env: PHPCS_VERSION="2.6.0"

    #### TEST STAGE ####
    # Additional builds to prevent issues with PHPCS versions incompatible with certain PHP versions.
    - stage: test
      # PHPCS is only compatible with PHP 7.4 as of version 3.5.0.
      php: 7.4
      env: PHPCS_VERSION="3.5.0"
    - php: 7.3
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 7.3
      # PHPCS is only compatible with PHP 7.3 as of version 3.3.1/2.9.2.
      env: PHPCS_VERSION="3.3.1"

    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1
    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="3.1.0"
    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="2.9.2"
    - php: 5.5
      dist: trusty
      env: PHPCS_VERSION="2.6.2"

    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="3.1.0"
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="2.9.2"

    # One extra build to verify issues around PHPCS annotations when they weren't fully accounted for yet.
    - php: 7.2
      env: PHPCS_VERSION="3.2.0"

    # And a few more to verify various tokenizer issues in older PHPCS versions.
    - php: 5.6
      env: PHPCS_VERSION="2.8.1"
    - php: 7.0
      env: PHPCS_VERSION="2.7.1"

    # Current lowest PHPCS version which _may_ run on PHP 8 is 3.5.0, so don't even try to test against older versions.
    - php: "nightly"
      env: PHPCS_VERSION="dev-master" LINT=1

    - php: 7.4
      env: PHPCS_VERSION="4.0.x-dev@dev"

    # Run risky tests separately.
    - php: 7.4
      env: PHPCS_VERSION="4.0.x-dev@dev" TEST_RISKY=1
      before_script: skip
      script:
        # "nothing" is excluded to force PHPUnit to ignore the <exclude> settings in phpunit.xml.dist.
        - composer test -- --group compareWithPHPCS --exclude-group nothing
      after_success: skip

    - php: 7.4
      env: PHPCS_VERSION="dev-master" TEST_RISKY=1
      before_script: skip
      script:
        # "nothing" is excluded to force PHPUnit to ignore the <exclude> settings in phpunit.xml.dist.
        - composer test -- --group compareWithPHPCS --exclude-group nothing
      after_success: skip

    #### CODE COVERAGE STAGE ####
    # N.B.: Coverage is only checked on the lowest and highest stable PHP versions for all PHPCS versions.
    # These builds are left out off the "test" stage so as not to duplicate test runs.
    # The script used is the default script below, the same as for the `test` stage.
    - stage: coverage
      php: 7.4
      env: PHPCS_VERSION="dev-master" LINT=1 COVERALLS_VERSION="^2.0"
    - php: 7.3
      # PHPCS is only compatible with PHP 7.3 as of version 3.3.1/2.9.2.
      env: PHPCS_VERSION="2.9.2" COVERALLS_VERSION="^2.0"

    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="dev-master" LINT=1 COVERALLS_VERSION="^1.0"
    - php: 5.4
      dist: trusty
      env: PHPCS_VERSION="2.6.0" COVERALLS_VERSION="^1.0"


  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"
    - env: PHPCS_VERSION="4.0.x-dev@dev"
    - env: PHPCS_VERSION="4.0.x-dev@dev" TEST_RISKY=1
    - env: PHPCS_VERSION="dev-master" TEST_RISKY=1


before_install:
  # Speed up build time by disabling Xdebug when its not needed.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Coverage" ]]; then
      phpenv config-rm xdebug.ini || echo 'No xdebug config.'
    fi

  # On stable PHPCS versions, allow for PHP deprecation notices.
  # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Sniff" && $PHPCS_VERSION != "dev-master" ]]; then
      echo 'error_reporting = E_ALL & ~E_DEPRECATED' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi

  # Turn on Xdebug code coverage mode in case Xdebug 3 is being used.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      echo 'xdebug.mode = coverage' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
    fi

install:
  # Set up test environment using Composer.
  - travis_retry composer require --no-update --no-scripts squizlabs/php_codesniffer:${PHPCS_VERSION}
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      travis_retry composer require --dev --no-update --no-suggest --no-scripts php-coveralls/php-coveralls:${COVERALLS_VERSION}
    fi

  # --prefer-dist will allow for optimal use of the travis caching ability.
  # The Composer PHPCS plugin takes care of setting the installed_paths for PHPCS.
  - |
    if [[ $TRAVIS_PHP_VERSION == "nightly" ]]; then
      # Temporary fix - PHPUnit 9.3 is buggy when used for code coverage, so not allowed "normally".
      # As PHP 8 doesn't run code coverage, we can safely install it there though.
      travis_retry composer require --no-update phpunit/phpunit:"^9.3"
      # Not all PHPUnit dependencies have stable releases yet allowing for PHP 8.0.
      travis_retry composer install --prefer-dist --no-suggest --ignore-platform-reqs
    else
      # Do a normal dev install in all other cases.
      travis_retry composer install --prefer-dist --no-suggest
    fi


before_script:
  - if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then mkdir -p build/logs; fi
  - phpenv rehash


script:
  # Lint PHP files against parse errors.
  - if [[ "$LINT" == "1" ]]; then composer lint; fi

  # Run the unit tests.
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" != "Coverage" ]]; then
      composer test
    elif [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" ]]; then
      composer coverage
    fi

after_success:
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" && $COVERALLS_VERSION == "^1.0" ]]; then
      php vendor/bin/coveralls -v -x build/logs/clover.xml
    fi
  - |
    if [[ "${TRAVIS_BUILD_STAGE_NAME^}" == "Coverage" && $COVERALLS_VERSION == "^2.0" ]]; then
      php vendor/bin/php-coveralls -v -x build/logs/clover.xml
    fi
